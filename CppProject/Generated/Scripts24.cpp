/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.10.28 16:06:12 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType block_set_fence(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		VarType variant;
		east = /*"false"*/ STR(749);
		west = /*"false"*/ STR(749);
		south = /*"false"*/ STR(749);
		north = /*"false"*/ STR(749);
		variant = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(787));
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
					east = /*"true"*/ STR(748);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(908))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing != /*"east"*/ STR(871) && facing != /*"west"*/ STR(872))
							east = /*"true"*/ STR(748);
					}
				
			}
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
					west = /*"true"*/ STR(748);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(908))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing != /*"east"*/ STR(871) && facing != /*"west"*/ STR(872))
							west = /*"true"*/ STR(748);
					}
				
			}
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
					south = /*"true"*/ STR(748);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(908))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing != /*"south"*/ STR(873) && facing != /*"north"*/ STR(874))
							south = /*"true"*/ STR(748);
					}
				
			}
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
					north = /*"true"*/ STR(748);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(908))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing != /*"south"*/ STR(873) && facing != /*"north"*/ STR(874))
							north = /*"true"*/ STR(748);
					}
				
			}
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(787), variant, /*"east"*/ STR(871), east, /*"west"*/ STR(872), west, /*"south"*/ STR(873), south, /*"north"*/ STR(874), north }));
		return IntType(0);
	}
	
	RealType block_set_fence_gate(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		IntType block;
		VarType facing;
		StringType inwall;
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(878));
		inwall = /*"false"*/ STR(749);
		if (facing == /*"east"*/ STR(871) || facing == /*"west"*/ STR(872))
		{
			if (!sBool(build_edge_yp))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
				if (block != null_ && idVar(block, type) == /*"wall"*/ STR(909))
					inwall = /*"true"*/ STR(748);
			}
			if (inwall == /*"false"*/ STR(749) && !sBool(build_edge_yn))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
				if (block != null_ && idVar(block, type) == /*"wall"*/ STR(909))
					inwall = /*"true"*/ STR(748);
			}
		}
		else
			if (facing == /*"south"*/ STR(873) || facing == /*"north"*/ STR(874))
			{
				if (!sBool(build_edge_xp))
				{
					block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
					if (block != null_ && idVar(block, type) == /*"wall"*/ STR(909))
						inwall = /*"true"*/ STR(748);
				}
				if (inwall == /*"false"*/ STR(749) && !sBool(build_edge_xn))
				{
					block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
					if (block != null_ && idVar(block, type) == /*"wall"*/ STR(909))
						inwall = /*"true"*/ STR(748);
				}
			}
		
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"in_wall"*/ STR(910), inwall);
		return IntType(0);
	}
	
	RealType block_set_fence_nether(ScopeAny self)
	{
		return block_set_fence(self);
	}
	
	RealType block_set_fire(ScopeAny self)
	{
		if (!sBool(builder_scenery_legacy))
			return IntType(0);
		StringType east, west, south, north, up;
		VarType variant;
		east = /*"false"*/ STR(749);
		west = /*"false"*/ STR(749);
		south = /*"false"*/ STR(749);
		north = /*"false"*/ STR(749);
		up = /*"false"*/ STR(749);
		variant = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(787));
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				east = /*"true"*/ STR(748);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				west = /*"true"*/ STR(748);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				south = /*"true"*/ STR(748);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				north = /*"true"*/ STR(748);
		}
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_ && block != sInt(block_current))
				up = /*"true"*/ STR(748);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(787), variant, /*"east"*/ STR(871), east, /*"west"*/ STR(872), west, /*"south"*/ STR(873), south, /*"north"*/ STR(874), north, /*"up"*/ STR(890), up }));
		return IntType(0);
	}
	
	RealType block_set_kelp(ScopeAny self)
	{
		if (!sBool(build_edge_zn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (block == null_ || idVar(block, type) != /*"kelp"*/ STR(911))
				global::vertex_wave_zmin = sInt(block_pos_z);
		}
		else
			global::vertex_wave_zmin = sInt(block_pos_z);
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(787)) == /*"kelp_plant"*/ STR(912))
			return IntType(0);
		if (sInt(build_pos_z) != (sInt(build_size_z) - IntType(1)))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(787), /*"kelp_plant"*/ STR(912) }));
		return IntType(0);
	}
	
	IntType block_set_leaves(Scope<obj_builder_thread> self)
	{
		VarType model = ObjType(obj_block_load_variant, ObjType(obj_block, self->block_current)->state_id_model_obj.Value(sReal(block_state_id_current)))->model.Value(IntType(0));
		if (global::_app->project_render_opaque_leaves > 0)
			return ObjType(obj_block_render_model, ObjType(obj_block_render_model, model)->opaque)->rendermodel_id;
		else
			return ObjType(obj_block_render_model, model)->rendermodel_id;
		
		return IntType(0);
	}
	
	RealType block_set_redstone_repeater(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"locked"*/ STR(913)) == /*"true"*/ STR(748))
			return IntType(0);
		VarType facing;
		StringType locked;
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(878));
		locked = /*"false"*/ STR(749);
		if (!sBool(build_edge_xp) && (facing == /*"south"*/ STR(873) || facing == /*"north"*/ STR(874)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(914))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(878)) == /*"east"*/ STR(871))
					locked = /*"true"*/ STR(748);
			}
		}
		if (locked == /*"false"*/ STR(749) && !sBool(build_edge_xn) && (facing == /*"south"*/ STR(873) || facing == /*"north"*/ STR(874)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(914))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(878)) == /*"west"*/ STR(872))
					locked = /*"true"*/ STR(748);
			}
		}
		if (locked == /*"false"*/ STR(749) && !sBool(build_edge_yp) && (facing == /*"east"*/ STR(871) || facing == /*"west"*/ STR(872)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(914))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(878)) == /*"south"*/ STR(873))
					locked = /*"true"*/ STR(748);
			}
		}
		if (locked == /*"false"*/ STR(749) && !sBool(build_edge_yn) && (facing == /*"east"*/ STR(871) || facing == /*"west"*/ STR(872)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(914))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(878)) == /*"north"*/ STR(874))
					locked = /*"true"*/ STR(748);
			}
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"locked"*/ STR(913), locked);
		return IntType(0);
	}
	
	RealType block_set_redstone_wire(ScopeAny self)
	{
		VarType pow;
		RealType powreal, red;
		pow = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"power"*/ STR(915));
		powreal = (RealType)string_get_real(pow) / 15.0;
		if (powreal == IntType(0))
			red = 0.3;
		else
			red = 0.6 * powreal + 0.4;
		
		sInt(block_color) = make_color_rgb((IntType)(red * IntType(255)), IntType(0), IntType(0));
		sVar(block_vertex_emissive) = powreal;
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_total) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"none"*/ STR(880);
		west = /*"none"*/ STR(880);
		south = /*"none"*/ STR(880);
		north = /*"none"*/ STR(880);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(916))
					east = /*"side"*/ STR(917);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(918) || idVar(block, type) == /*"redstone_comparator"*/ STR(919))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing == /*"east"*/ STR(871) || facing == /*"west"*/ STR(872))
							east = /*"side"*/ STR(917);
					}
				
			}
			if (east == /*"none"*/ STR(880) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					east = /*"up"*/ STR(890);
			}
			if (east == /*"none"*/ STR(880) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					east = /*"side"*/ STR(917);
			}
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(916))
					west = /*"side"*/ STR(917);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(918) || idVar(block, type) == /*"redstone_comparator"*/ STR(919))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing == /*"east"*/ STR(871) || facing == /*"west"*/ STR(872))
							west = /*"side"*/ STR(917);
					}
				
			}
			if (west == /*"none"*/ STR(880) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					west = /*"up"*/ STR(890);
			}
			if (west == /*"none"*/ STR(880) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
			{
				block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					west = /*"side"*/ STR(917);
			}
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(916))
					south = /*"side"*/ STR(917);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(918) || idVar(block, type) == /*"redstone_comparator"*/ STR(919))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing == /*"south"*/ STR(873) || facing == /*"north"*/ STR(874))
							south = /*"side"*/ STR(917);
					}
				
			}
			if (south == /*"none"*/ STR(880) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					south = /*"up"*/ STR(890);
			}
			if (south == /*"none"*/ STR(880) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					south = /*"side"*/ STR(917);
			}
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(916))
					north = /*"side"*/ STR(917);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(918) || idVar(block, type) == /*"redstone_comparator"*/ STR(919))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(878));
						if (facing == /*"south"*/ STR(873) || facing == /*"north"*/ STR(874))
							north = /*"side"*/ STR(917);
					}
				
			}
			if (north == /*"none"*/ STR(880) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					north = /*"up"*/ STR(890);
			}
			if (north == /*"none"*/ STR(880) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					north = /*"side"*/ STR(917);
			}
		}
		if (east == /*"none"*/ STR(880) && west == /*"none"*/ STR(880) && south == /*"none"*/ STR(880) && north == /*"none"*/ STR(880))
		{
			east = /*"side"*/ STR(917);
			west = /*"side"*/ STR(917);
			south = /*"side"*/ STR(917);
			north = /*"side"*/ STR(917);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(871), east, /*"west"*/ STR(872), west, /*"south"*/ STR(873), south, /*"north"*/ STR(874), north, /*"power"*/ STR(915), pow }));
		return IntType(0);
	}
	
	RealType block_set_snowy(ScopeAny self)
	{
		if (block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"snowy"*/ STR(920)) == /*"true"*/ STR(748))
			return IntType(0);
		StringType snowy = /*"false"*/ STR(749);
		if (!sBool(build_edge_zp))
		{
			IntType otherblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (otherblock != null_ && idVar(otherblock, type) == /*"snow"*/ STR(921))
				snowy = /*"true"*/ STR(748);
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"snowy"*/ STR(920), snowy);
		return IntType(0);
	}
	
	RealType block_set_stairs(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		StringType shape;
		VarType half, facing;
		shape = /*"straight"*/ STR(922);
		half = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(893));
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(878));
		if (!sBool(build_edge_xp) && (facing == /*"east"*/ STR(871) || facing == /*"west"*/ STR(872)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(923))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(893)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(878));
					if (facing == /*"east"*/ STR(871))
					{
						if (otherfacing == /*"south"*/ STR(873))
							shape = /*"outer_right"*/ STR(924);
						else
							if (otherfacing == /*"north"*/ STR(874))
								shape = /*"outer_left"*/ STR(925);
						
					}
					else
					{
						if (otherfacing == /*"south"*/ STR(873))
							shape = /*"inner_left"*/ STR(926);
						else
							if (otherfacing == /*"north"*/ STR(874))
								shape = /*"inner_right"*/ STR(927);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_xn) && (facing == /*"east"*/ STR(871) || facing == /*"west"*/ STR(872)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(923))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(893)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(878));
					if (facing == /*"east"*/ STR(871))
					{
						if (otherfacing == /*"south"*/ STR(873))
							shape = /*"inner_right"*/ STR(927);
						else
							if (otherfacing == /*"north"*/ STR(874))
								shape = /*"inner_left"*/ STR(926);
						
					}
					else
					{
						if (otherfacing == /*"south"*/ STR(873))
							shape = /*"outer_left"*/ STR(925);
						else
							if (otherfacing == /*"north"*/ STR(874))
								shape = /*"outer_right"*/ STR(924);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_yp) && (facing == /*"south"*/ STR(873) || facing == /*"north"*/ STR(874)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(923))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(893)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(878));
					if (facing == /*"south"*/ STR(873))
					{
						if (otherfacing == /*"east"*/ STR(871))
							shape = /*"outer_left"*/ STR(925);
						else
							if (otherfacing == /*"west"*/ STR(872))
								shape = /*"outer_right"*/ STR(924);
						
					}
					else
					{
						if (otherfacing == /*"east"*/ STR(871))
							shape = /*"inner_right"*/ STR(927);
						else
							if (otherfacing == /*"west"*/ STR(872))
								shape = /*"inner_left"*/ STR(926);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_yn) && (facing == /*"south"*/ STR(873) || facing == /*"north"*/ STR(874)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(923))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(893)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(878));
					if (facing == /*"south"*/ STR(873))
					{
						if (otherfacing == /*"east"*/ STR(871))
							shape = /*"inner_left"*/ STR(926);
						else
							if (otherfacing == /*"west"*/ STR(872))
								shape = /*"inner_right"*/ STR(927);
						
					}
					else
					{
						if (otherfacing == /*"east"*/ STR(871))
							shape = /*"outer_right"*/ STR(924);
						else
							if (otherfacing == /*"west"*/ STR(872))
								shape = /*"outer_left"*/ STR(925);
						
					}
					
				}
			}
		}
		if (shape != /*"straight"*/ STR(922))
			sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"shape"*/ STR(536), shape);
		return IntType(0);
	}
	
	RealType block_set_state_id_value(IntType block, RealType stateid, StringType name, VarType val)
	{
		VarType state;
		if (block == null_ || ObjType(obj_block, block)->states_map == null_)
			return stateid;
		state = DsMap(ObjType(obj_block, block)->states_map).Value(name);
		if (is_undefined(state))
			return stateid;
		stateid -= (mod(((IntType)(stateid / idReal(state, value_id))), idReal(state, value_amount))) * idReal(state, value_id);
		stateid += DsMap(idInt(state, value_map)).Value(val) * idReal(state, value_id);
		return stateid;
	}
	
	RealType block_set_tripwire(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"false"*/ STR(749);
		west = /*"false"*/ STR(749);
		south = /*"false"*/ STR(749);
		north = /*"false"*/ STR(749);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(928) || idVar(block, name) == /*"tripwire_hook"*/ STR(929)))
				east = /*"true"*/ STR(748);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(928) || idVar(block, name) == /*"tripwire_hook"*/ STR(929)))
				west = /*"true"*/ STR(748);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(928) || idVar(block, name) == /*"tripwire_hook"*/ STR(929)))
				south = /*"true"*/ STR(748);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(928) || idVar(block, name) == /*"tripwire_hook"*/ STR(929)))
				north = /*"true"*/ STR(748);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(871), east, /*"west"*/ STR(872), west, /*"south"*/ STR(873), south, /*"north"*/ STR(874), north }));
		return IntType(0);
	}
	
	RealType block_set_twisting_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (block == null_ || idVar(block, type) != /*"twisting_vines"*/ STR(930))
				global::vertex_wave_zmin = sInt(block_pos_z);
		}
		else
			global::vertex_wave_zmin = sInt(block_pos_z);
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(787)) == /*"twisting_vines_plant"*/ STR(931))
			return IntType(0);
		if (sInt(build_pos_z) != (sInt(build_size_z) - IntType(1)))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(787), /*"twisting_vines_plant"*/ STR(931) }));
		return IntType(0);
	}
	
	RealType block_set_vine(ScopeAny self)
	{
		if (!sBool(builder_scenery_legacy))
			return IntType(0);
		StringType up = /*"false"*/ STR(749);
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_ && block != sInt(block_current))
				up = /*"true"*/ STR(748);
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"up"*/ STR(890), up);
		return IntType(0);
	}
	
	RealType block_set_wall(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		IntType east, west, south, north, i;
		VarType variant;
		ArrType states;
		BoolType tall;
		east = IntType(0);
		west = IntType(0);
		south = IntType(0);
		north = IntType(0);
		variant = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(787));
		states = ArrType::From({ /*"none"*/ STR(880), /*"low"*/ STR(600), /*"tall"*/ STR(932) });
		tall = false;
		i = IntType(0);
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
					tall = true;
			}
		}
		for (IntType _it = 0, _it_max = IntType(2); _it < _it_max; _it++)
		{
			if (!sBool(build_edge_xp) && (i == IntType(0) || (i == IntType(1) && east > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
						east++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(908))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i), /*"facing"*/ STR(878));
							if (facing != /*"east"*/ STR(871) && facing != /*"west"*/ STR(872))
								east++;
						}
					
				}
			}
			if (!sBool(build_edge_xn) && (i == IntType(0) || (i == IntType(1) && west > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
						west++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(908))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i), /*"facing"*/ STR(878));
							if (facing != /*"east"*/ STR(871) && facing != /*"west"*/ STR(872))
								west++;
						}
					
				}
			}
			if (!sBool(build_edge_yp) && (i == IntType(0) || (i == IntType(1) && south > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
						south++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(908))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + i), /*"facing"*/ STR(878));
							if (facing != /*"south"*/ STR(873) && facing != /*"north"*/ STR(874))
								south++;
						}
					
				}
			}
			if (!sBool(build_edge_yn) && (i == IntType(0) || (i == IntType(1) && north > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
						north++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(908))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + i), /*"facing"*/ STR(878));
							if (facing != /*"south"*/ STR(873) && facing != /*"north"*/ STR(874))
								north++;
						}
					
				}
			}
			if (!tall)
				break;
			else
				i++;
			
		}
		StringType up;
		if ((east > IntType(0) && west > IntType(0) && south == IntType(0) && north == IntType(0)) || (east == IntType(0) && west == IntType(0) && south > IntType(0) && north > IntType(0)))
			up = /*"false"*/ STR(749);
		else
			up = /*"true"*/ STR(748);
		
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(787), variant, /*"east"*/ STR(871), states.Value(east), /*"west"*/ STR(872), states.Value(west), /*"south"*/ STR(873), states.Value(south), /*"north"*/ STR(874), states.Value(north), /*"up"*/ STR(890), up }));
		return IntType(0);
	}
	
	RealType block_set_weeping_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block == null_ || idVar(block, type) != /*"weeping_vines"*/ STR(933))
				global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		}
		else
			global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(787)) == /*"weeping_vines_plant"*/ STR(934))
			return IntType(0);
		if (sInt(build_pos_z) == IntType(0))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(787), /*"weeping_vines"*/ STR(933) }));
		else
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(787), /*"weeping_vines_plant"*/ STR(934) }));
		
		return IntType(0);
	}
	
	VarType block_texture_get_blend(VarType texname, VarType res)
	{
		VarType col = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_color_map).Value(texname);
		if (!is_undefined(col))
		{
			if (!res_is_ready(res))
				res = global::mc_res;
			if (is_real(col))
				return col;
			switch (StringType(col).id)
			{
				case 835: // grass
				{
					return idVar(res, color_grass);
				}
				case 836: // foliage
				{
					return idVar(res, color_foliage);
				}
				case 789: // water
				{
					return idVar(res, color_water);
				}
				case 837: // oak_leaves
				{
					return idVar(res, color_leaves_oak);
				}
				case 838: // spruce_leaves
				{
					return idVar(res, color_leaves_spruce);
				}
				case 839: // birch_leaves
				{
					return idVar(res, color_leaves_birch);
				}
				case 840: // jungle_leaves
				{
					return idVar(res, color_leaves_jungle);
				}
				case 841: // acacia_leaves
				{
					return idVar(res, color_leaves_acacia);
				}
				case 842: // dark_oak_leaves
				{
					return idVar(res, color_leaves_dark_oak);
				}
				case 843: // mangrove_leaves
				{
					return idVar(res, color_leaves_mangrove);
				}
			}
			
		}
		return c_white;
	}
	
	RealType block_texture_get_frame(RealType realtime)
	{
		return mod(floor(((realtime > 0) ? global::current_step : global::_app->background_time) * global::_app->background_texture_animation_speed), block_sheet_ani_frames);
	}
	
	void block_tile_entity_banner(Scope<obj_builder_thread> self, IntType map)
	{
		VarType patterns, base;
		BoolType legacy;
		ArrType patternlist, patterncolorlist;
		patterns = DsMap(map).Value(/*"Patterns"*/ STR(935));
		if (ds_map_exists(map, /*"Base"*/ STR(936)))
		{
			base = DsMap(map).Value(/*"Base"*/ STR(936));
			legacy = true;
		}
		else
		{
			base = null_;
			legacy = false;
		}
		
		patternlist = ArrType();
		patterncolorlist = ArrType();
		if (ds_list_valid(patterns))
		{
			for (IntType i = IntType(0); i < ds_list_size((IntType)(patterns)); i++)
			{
				VarType patternmap = DsList(patterns).Value(i);
				if (!ds_map_valid(patternmap))
					continue;
				VarType pattern, color;
				IntType patternindex;
				pattern = value_get_string(DsMap(patternmap).Value(/*"Pattern"*/ STR(937)), DsList(global::minecraft_pattern_short_list).Value(IntType(1)));
				color = value_get_real(DsMap(patternmap).Value(/*"Color"*/ STR(938)), IntType(0));
				patternindex = ds_list_find_index(global::minecraft_pattern_short_list, pattern);
				if (legacy)
					color = (ObjType(obj_swatch, global::minecraft_swatch_dyes)->size - IntType(1)) - color;
				array_add(VarType::CreateRef(patternlist), DsList(global::minecraft_pattern_list).Value(patternindex));
				array_add(VarType::CreateRef(patterncolorlist), ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors.Value(color));
			}
		}
		RealType colorindex = IntType(0);
		VarType color = c_white;
		if (legacy)
		{
			colorindex = (ObjType(obj_swatch, global::minecraft_swatch_dyes)->size - IntType(1)) - base;
			color = ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors.Value(colorindex);
		}
		else
		{
			VarType col = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"color"*/ STR(892));
			if (!is_undefined(col))
				color = DsMap(ObjType(obj_swatch, global::minecraft_swatch_dyes)->map).Value(col);
		}
		
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_color_map)[self->build_pos] = color;
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_patterns_map)[self->build_pos] = patternlist;
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_pattern_colors_map)[self->build_pos] = patterncolorlist;
	}
	
	RealType block_tile_entity_bed(Scope<obj_builder_thread> self, IntType map)
	{
		VarType colorid = DsMap(map).Value(/*"color"*/ STR(892));
		if (!is_real(colorid))
			return IntType(0);
		if (is_undefined(colorid) || colorid >= ObjType(obj_swatch, global::minecraft_swatch_dyes)->size)
			return IntType(0);
		RealType newstate = block_set_state_id_value(self->block_current, self->block_state_id_current, /*"color"*/ STR(892), ObjType(obj_swatch, global::minecraft_swatch_dyes)->color_names.Value(colorid));
		builder_set_state_id(self, self->build_pos_x, self->build_pos_y, self->build_pos_z, newstate);
		return 0.0;
	}
	
	void block_tile_entity_decorated_pot(Scope<obj_builder_thread> self, IntType map)
	{
		VarType sherdsarr = DsMap(map).Value(/*"sherds"*/ STR(939));
		for (IntType i = IntType(0); i < ds_list_size((IntType)(sherdsarr)); i++)
		{
			VarType sherd = DsList(sherdsarr).Value(i);
			if (DsMap(global::minecraft_sherd_map).Value(sherd) != VarType())
				DsList(sherdsarr)[i] = DsMap(global::minecraft_sherd_map).Value(sherd);
			else
				DsList(sherdsarr)[i] = /*"none"*/ STR(880);
			
		}
		ArrType state = ArrType::From({});
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_front"*/ STR(940), DsList(sherdsarr).Value(IntType(0)) }));
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_left"*/ STR(941), DsList(sherdsarr).Value(IntType(1)) }));
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_right"*/ STR(942), DsList(sherdsarr).Value(IntType(2)) }));
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_back"*/ STR(943), DsList(sherdsarr).Value(IntType(3)) }));
		array_add(VarType::CreateRef(state), block_get_state_id_state_vars(self->block_current, self->block_state_id_current));
		DsMap(ObjType(obj_builder, global::mc_builder)->block_decorated_pot_sherds_map)[self->build_pos] = state;
	}
	
	void block_tile_entity_hanging_sign(Scope<obj_builder_thread> self, VarType map)
	{
		block_tile_entity_sign(self, map);
	}
	
	VarType block_tile_entity_sign_text(VarType map)
	{
		VarType messagemap = value_get_array(DsMap(map).Value(/*"messages"*/ STR(944)), /*""*/ STR(0));
		VarType text = /*""*/ STR(0);
		for (IntType i = IntType(0); i < IntType(4); i++)
		{
			VarType line = /*""*/ STR(0);
			IntType textmap = json_decode(messagemap.Value(i));
			if (ds_map_valid(textmap))
			{
				if (is_string(DsMap(textmap).Value(/*"text"*/ STR(104))))
					line = DsMap(textmap).Value(/*"text"*/ STR(104));
				ds_map_destroy(textmap);
			}
			if (line == /*""*/ STR(0))
				line = /*" "*/ STR(21);
			if (i > IntType(0))
				text += /*"\n"*/ STR(945);
			text += line;
		}
		return text;
	}
	
	RealType block_tile_entity_sign(Scope<obj_builder_thread> self, IntType map)
	{
		VarType frontmap = DsMap(map).Value(/*"front_text"*/ STR(946));
		VarType backmap = DsMap(map).Value(/*"back_text"*/ STR(947));
		VarType text, colorname, color, glowcolor, glowing;
		if (ds_map_valid(frontmap))
		{
			colorname = value_get_string(DsMap(frontmap).Value(/*"color"*/ STR(892)), /*"black"*/ STR(948));
			glowing = value_get_real(DsMap(frontmap).Value(/*"has_glowing_text"*/ STR(949)), IntType(0));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_color_map)[self->build_pos] = ((glowing > 0) ? minecraft_get_color(/*"text_glow:"*/ STR(950) + colorname) : minecraft_get_color(/*"dye:"*/ STR(951) + colorname));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glow_color_map)[self->build_pos] = minecraft_get_color(/*"text_glow:outline_"*/ STR(952) + colorname);
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glowing_map)[self->build_pos] = glowing;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_map)[self->build_pos] = block_tile_entity_sign_text(frontmap);
			colorname = value_get_string(DsMap(backmap).Value(/*"color"*/ STR(892)), /*"black"*/ STR(948));
			glowing = value_get_real(DsMap(backmap).Value(/*"has_glowing_text"*/ STR(949)), IntType(0));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_color_map)[self->build_pos] = ((glowing > 0) ? minecraft_get_color(/*"text_glow:"*/ STR(950) + colorname) : minecraft_get_color(/*"dye:"*/ STR(951) + colorname));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_glow_color_map)[self->build_pos] = minecraft_get_color(/*"text_glow:outline_"*/ STR(952) + colorname);
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_glowing_map)[self->build_pos] = glowing;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_map)[self->build_pos] = block_tile_entity_sign_text(backmap);
		}
		else
		{
			colorname = value_get_string(DsMap(map).Value(/*"Color"*/ STR(938)), /*"black"*/ STR(948));
			glowing = value_get_real(DsMap(map).Value(/*"GlowingText"*/ STR(953)), IntType(0));
			color = ((glowing > 0) ? minecraft_get_color(/*"text_glow:"*/ STR(950) + colorname) : minecraft_get_color(/*"dye:"*/ STR(951) + colorname));
			glowcolor = minecraft_get_color(/*"text_glow:outline_"*/ STR(952) + colorname);
			text = /*""*/ STR(0);
			for (IntType i = IntType(0); i < IntType(4); i++)
			{
				VarType line = DsMap(map).Value(/*"Text"*/ STR(954) + string(i + IntType(1)));
				if (!is_string(line))
					return IntType(0);
				IntType textmap = json_decode(line);
				if (ds_map_valid(textmap))
				{
					if (ds_list_valid(DsMap(textmap).Value(/*"extra"*/ STR(955))) && ds_list_size((IntType)(DsMap(textmap).Value(/*"extra"*/ STR(955)))) > IntType(0))
					{
						IntType extramap = ds_list_find_value(DsMap(textmap).Value(/*"extra"*/ STR(955)), IntType(0));
						if (ds_map_valid(extramap) && is_string(DsMap(extramap).Value(/*"text"*/ STR(104))))
							textmap = extramap;
					}
					if (is_string(DsMap(textmap).Value(/*"text"*/ STR(104))))
						line = DsMap(textmap).Value(/*"text"*/ STR(104));
					ds_map_destroy(textmap);
				}
				if (line == /*""*/ STR(0))
					line = /*" "*/ STR(21);
				if (i > IntType(0))
					text += /*"\n"*/ STR(945);
				text += line;
			}
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_map)[self->build_pos] = text;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_color_map)[self->build_pos] = color;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glow_color_map)[self->build_pos] = glowcolor;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glowing_map)[self->build_pos] = glowing;
		}
		
		return 0.0;
	}
	
}
